# Родительский класс.
class MeleeWeapon:
    # Конструктор родительского класса.
    def __init__(self, name):
        # Свойства родительского класса: название оружия и прочность.
        self.name = name
        self.strength = 100

    # Метод родительского класса — рубящий удар.
    def slashing_blow(self):
        # При рубящем ударе уменьшаем прочность меча на 10.
        self.strength -= 10
        print(f'Нанесён рубящий удар оружием {self.name}.')

    # Метод родительского класса — заточка оружия.
    def sharpen(self):
        # При заточке восстанавливаем стартовую прочность оружия.
        self.strength = 100
        print(f'Оружие "{self.name}" заточено.')


# Дочерний класс Sword.
class Sword(MeleeWeapon):
    ...


class Axe(MeleeWeapon):
    # В классе-наследнике определяется конструктор
    # с собственным параметром material.
    def __init__(self, name, material):
        # Вызываем конструктор класса-родителя.
        super().__init__(name)
        # Передаём значение параметра в новое свойство.
        self.material = material

    # Объявляем собственный для класса Axe метод.
    def slashing_blow(self):
        # Описываем логику работы метода дочернего класса.
        print('СОКРУШИТЕЛЬНЫЙ УДАР!')
        # Возвращаем результат выполнения метода slashing_blow() в родительском классе.
        return super().slashing_blow()


# Теперь при создании объекта класса Axe
# нужно обязательно указывать два параметра:
# название и материал.
brodex = Axe('Верный', "железо")
# Древнегреческий одноручный меч.
xiphos = Sword('Разящий')

# Каждый из дочерних классов имеет такие же методы и свойства,что иродительский
brodex.slashing_blow()
xiphos.sharpen()
